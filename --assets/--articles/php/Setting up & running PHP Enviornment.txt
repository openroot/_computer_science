// PHP Installations
1. command: sudo su
2. command: apt install php
3. command: apt install php-cli php-common php-mysql php-zip php-gd php-mbstring php-curl php-xml php-bcmath php-xdebug
4. command: nano /etc/php/8.1/cli/conf.d/20-xdebug.ini // command: php --ini (to get actual path of the file)
5. Add following lines & Ctrl+X

zend_extension=xdebug.so
xdebug.mode=debug
xdebug.start_with_request=yes
xdebug.discover_client_host=1
xdebug.log_level=0

6. command: apt install composer
7. command: php -S localhost:4000 -t /home/devop/github/_php/test_f3/public; // another example, php -S localhost:2000 -t Q:\--system\--git\--code\github\_php\openroot.localhost
8. By now, php (without mysql) up & running for visual studio code with xdebug .
Consecutive command activates specification up http://localhost:4000 (for validate)

// PHP Server
1. Open directory usr->bin as root.
2. Paste 'devop_background_services' directory from 'droot-kalibackgroundservices' github project.
3. Open directory etc->systemd->system as root.
4. Paste all files of 'system' directory from 'droot-kalibackgroundservices' github project.
5. command: systemctl status php_serve__test_f3.service
// it would have been loaded with 'inactive' status
6. command: systemctl enable php_serve__test_f3.service
7. command: systemctl start php_serve__test_f3.service
8. command: systemctl status php_serve__droot-adminer.service
// it would have been loaded with 'inactive' status
9. command: systemctl enable php_serve__droot-adminer.service
10. command: systemctl start php_serve__droot-adminer.service
11. By now, automated php-server for the above two projects would have been activated.

// MySQL Installations
1. command: apt install mysql-server
2. command: systemctl status mysql.service
3. command: systemctl enable mysql.service
4. command: systemctl start mysql.service
5. command: mysql -u root
6. command: CREATE USER 'devop'@'localhost' IDENTIFIED BY '<default_password>';
7. command: GRANT ALL PRIVILEGES ON *.* TO 'devop'@'localhost' WITH GRANT OPTION;
8. command: SET GLOBAL default_storage_engine = 'InnoDB';
9. command: exit;
10. command: mysql -u devop -p // type & enter: <default_password>
11. command: show databases;
// Shows existing databases.
12. Browse to: http://localhost:1000/adminer
// Use same credentials to login.
13. CREATE DATABASE test_f3; for github project 'test_f3'.
14. By now, MySQL with a for github project 'test_f3' would have been up & running.

// Validate Setup
1. Restart system.
2. Browse to: http://localhost:1000/adminer // Validates MySQL up & running
3. Browse to: http://localhost:4000/info // Validates a github project 'test_f3' up & running.
4. Open 'Visual Studio Code' -> open 'test_f3' folder -> Put breakpoint at line 214 in '/public/index.php' file
5. Press F5 -> refresh 'http://localhost:4000/info'
// Breakpoint would have been hit.

===

// [optional] Make project 'Composer' based
1. Create a folder 'test_project_composer'.
2. Open the folder in terminal.
3. command: composer init
4. Follow the instructions provided by composer.
5. Reference: https://www.digitalocean.com/community/tutorials/how-to-install-php-8-1-and-set-up-a-local-development-environment-on-ubuntu-22-04
